=head1 NAME

OpusVL::FB11::Quickstart - Quick start to using FB11

=head1 DESCRIPTION

This is a very brief quick start to creating an FB11 application. For an
overview of FB11 itself, see L<OpusVL::FB11/OVERVIEW>.

=head1 NEW APPLICATION

=head2 Bootstrap

Bootstrapping a new FB11 application is easy if you have L<Dist::Zilla>. Simply
install L<Dist::Zilla::MintingProfile::FB11> and you can easily create a
new app, or components.

    $ dzil new -P FB11 MyApp

This will create a new FB11 application called MyApp.

If you don't have Dist::Zilla, you can use the I<examples/BootstrapApp> directory
in the distribution as a skeleton that you can copy. Of course, this requires
more manual intervention that Dist::Zilla automates away.

Once you have your skeleton directory you have an application that you can run,
because you have a PSGI file and something for it to load. The thing it loads is
a subclass of L<OpusVL::FB11> itself, and uses L<CatalystX::InjectComponent> to
build up the application.

=head2 Database

FB11 uses an extension of L<DBIx::Class::DeploymentHandler>,
L<OpusVL::DeploymentHandler>, to deploy databases. This extension allows each
component to manage its own database, merging separate schemata into a single
database schema.

Although it is possible to use different physical schemata within PostgreSQL, it
is theoretically feasible to use a different database, because we use
L<DBIx::Class>. However, it is entirely possible that some psql-specific
features exist.

A script is installed alongside your FB11 installation called I<fb11-dbh>. You
should familiarise yourself with this.

FB11 comes with a single built-in schema, which is the Authentication database.
Although not strictly compulsory, most FB11 functionality relies on it.

    fb11-dbh OpusVL::FB11::Schema::FB11AuthDB -t1 deploy
    fb11-dbh OpusVL::FB11::Schema::FB11AuthDB upgrade

Note that the above commands will probably require the C<--user>, C<--password>,
and C<--connection-string> options passed to it. See its manpage/perldoc for
details.

=head2 Components

Conventionally, components live in the C<FB11X> namespace, normally inside your
application's own namespace or in a namespace appropriate to the scope of the
component. Many components are bundled with FB11 itself, and exist in the
C<OpusVL::FB11X> namespace.

These namespaces are not special and will not be used by code to automatically
load components based on partial names or existence in C<@INC>. You have to
select your components explicitly.

Out of the box, the only thing you get is authentication. Your FB11 application
will show you a login screen. You can create an initial user account with the
provided script I<init-fb11-auth-db>.

Components are added to the application in the C<Builder.pm> file.

    package MyApp::Builder;
    ...
    override _build_plugins => sub {
        my $plugins = super();

        push @$plugins, qw(
            OpusVL::FB11X::SysParams
        );

        return $plugins;
    };


