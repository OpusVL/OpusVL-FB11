#!/usr/bin/perl
use strict;
use warnings;
use 5.014;
use Getopt::Long qw(:config gnu_getopt);
use Pod::Usage;

our $VERSION = '1';

# PODNAME: init-fb11-auth-db
# We also should allow AppKitAuthDB
my %option = (
    password  => 'password',
    model     => 'FB11AuthDB',
    username  => 'fb11admin'
    #    resultset => 'User',
);

GetOptions (
    \%option,
    'password|p=s',
    'model|m=s',
    'update|u',
    'username|U=s'
    #    'resultset|rs=s',
);
my $app = shift or pod2usage({ -msg => "Missing app name", -exitval => 1 });;
eval "require $app" or die $@;

my $users = $app->model($option{model})->resultset('User');
my $user = $users->find({ username => $option{username} });

unless($user)
{
    $user = $users->create({
        username => $option{username},
        email    => $option{username} . '@localhost',
        name     => 'Administrator',
        password => $option{password},
    });
}

if ($option{update}) {
    $user->update({ password => $option{password} });
}

my $feature_list = $app->fb11_features->feature_list;

for my $section (keys %$feature_list) {
    my $roles = $feature_list->{$section};

    for my $role (keys %$roles) {
        $app->model($option{model})->resultset('Aclfeature')->find_or_create({
            feature => $section . '/' . $role
        });
    }
}

my $admin_role = $app->model($option{model})->resultset('Role')->find_or_create({
    role => 'Admin'
});

$app->model($option{model})->schema->txn_do(sub {
    for my $feature ( $app->model($option{model})->resultset('Aclfeature')->all ) {
        $admin_role->add_to_aclfeatures($feature)
            unless $admin_role->aclfeatures->find($feature->id);
        say sprintf "Added %s to %s", $feature->feature, $admin_role->role;
    }
});

$user->add_to_roles($admin_role)
    unless $user->roles->find($admin_role->id);

=head1 NAME

init-fb11-auth-db - Initialise the FB11AuthDB in your newly-deployed database.

=head1 SYNOPSIS

    init-fb11-auth-db [--password|-p secretpass] MyApp

=head1 DESCRIPTION

Creates a default fb11admin user in the given app, then registers all
C<FB11Feature> features from the application into the Admin role, then gives the
fb11admin user the admin role.

The script may be run multiple times; steps that are not required are not
performed.

=head1 OPTIONS

=head2 --password

=head2 -p

The default password is password because we'd mostly expect you to do this in
dev. Use this to override that.

=head2 --model

=head2 -m

The model to use. Defaults to FB11AuthDB, but you may wish to use AppKitAuthDB.

=head2 --update

=head2 -u

Update the password. This is useful if the user exists but needs its password
resetting.

=head2 --username

=head2 -U

Override the default fb11admin user. This is mostly useful if you're using an
old DB that has appkitadmin in it already.
