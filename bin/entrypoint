#!/opt/perl5/bin/perl

our $VERSION = '1';

use strict;
use warnings;
no warnings 'experimental::signatures';;
use v5.20;
use Path::Class;
use YAML ();
use Data::Dumper;

if ($ENV{LOCAL_LIBS}) {
    for my $lib (split /:/, $ENV{LOCAL_LIBS}) {
        $ENV{PERL5LIB} = join ':', add_project_to_perl5lib($lib), $ENV{PERL5LIB};
        $ENV{PATH} = join ':', add_project_to_path($lib), $ENV{PATH};
    }
}

if ($ENV{DEV_MODE}) {
    my $default_local_libs = dir($ENV{LOCAL_LIBS_FROM} || '/opt/local');
    if ( -e $default_local_libs ) {
        my @p5l = map { add_project_to_perl5lib($_) } $default_local_libs->children;
        $ENV{PERL5LIB} = join ':', @p5l, ($ENV{PERL5LIB} // ());

        my @path = map { add_project_to_path($_) } $default_local_libs->children;
        $ENV{PATH} = join ':', @path, ($ENV{PATH} // ());
        if ($ENV{INSTALLDEPS}) {
            installdeps($_) for $default_local_libs->children;
        }
    }
}

# Read default environment info from an /apps.yml
# Makes app selection easier for users of our container without them having to know the ins and outs
# of everything that must be altered together.  e.g. PSGI and CATALYST_CONFIG usually vary together.
if (my $appname = $ENV{FB11_APP}) {
    if ($ENV{FB11_APPFILE} and not -e $ENV{FB11_APPFILE}) {
        die "FB11_APPFILE was set (to $ENV{FB11_APPFILE}), but it does not exist\n";
    }

    $ENV{FB11_APPFILE} ||= '/apps.yml';

    die "FB11_APP was set but $ENV{FB11_APPFILE} does not exist"
        unless -e $ENV{FB11_APPFILE};

    say STDERR "Apps file: $ENV{FB11_APPFILE}";
    say STDERR "Application selection: FB11_APP=$appname";

    my $appfile = YAML::LoadFile($ENV{FB11_APPFILE});

    my $service = $appfile->{apps}->{$appname};
    unless ($service) {
        die "You specified FB11_APP=$appname but that is not declared in $ENV{FB11_APPFILE}";
    }

    my $environment = $service->{default_environment} // {};
    for (keys %{$environment}) {
        $ENV{$_} ||= $environment->{$_};
    }
}

if (@ARGV) {
    exec @ARGV or die $!
}

if (not $ENV{PSGI}) {
    my $error = "No PSGI was ever set.";

    if (-e $ENV{FB11_APPFILE}) {
        my $appfile = YAML::LoadFile($ENV{FB11_APPFILE});
        $error .= " Set PSGI directly or set FB11_APP\n";
        $error .= "Apps:\n";
        $error .= join "\n", keys %{ $appfile->{apps} };
    }

    die "$error\n";
}

# TODO read $appfile once
my $appfile = YAML::LoadFile($ENV{FB11_APPFILE});
my $default_command_from_yaml =
    $appfile
    ->{apps}
    ->{$ENV{FB11_APP}}
    ->{default_command};

my @cmd;

if (defined($default_command_from_yaml)) 
{
    warn "default_command_from_yaml is defined as: '$default_command_from_yaml'";
    warn Dumper($default_command_from_yaml);
    @cmd = @{$default_command_from_yaml};
}
else 
{
    warn "default_command_from_yaml is NOT defined";
    @cmd = run_psgi_cmdline();
    warn Dumper(\@cmd);
}

exec qw(gosu fb11), @cmd;

sub run_psgi_cmdline {
    my @cmd;

    my $PORT = $ENV{FB11_PORT} || 5000;

    # in DEV_MODE we ignore MEMORY_LIMIT and WORKERS
    if ($ENV{DEV_MODE}) {
        push @cmd, qw(/opt/perl5/bin/plackup --port), $PORT;

        if ($ENV{DEBUG_CONSOLE} or -t STDOUT) {
            unshift @cmd, qw(/opt/perl5/bin/perl -d);
        }
    }
    else {
        push @cmd, qw(/opt/perl5/bin/starman --server Martian --listen), ":$PORT";

        if ($ENV{MEMORY_LIMIT}) {
            push @cmd, '--memory-limit', $ENV{MEMORY_LIMIT};
        }

        if ($ENV{WORKERS}) {
            push @cmd, '--workers', $ENV{WORKERS};
        }

        if ($ENV{PRELOAD}) {
            push @cmd, '--preload-app'
        }

        if ($ENV{STACKTRACE}) {
            unshift @cmd, qw(/opt/perl5/bin/perl -d:Confess);
        }

        # this is 2>&1, which we do for not-dev-mode
        open STDERR, '>&', STDOUT;
    }

    push @cmd, $ENV{PSGI};
    return @cmd
}

sub add_project_to_perl5lib {
    my $dir = dir(shift);
    return map { add_dist_to_perl5lib($_) } $dir->children;
}
sub add_dist_to_perl5lib {
    my $distdir = shift;
    return unless $distdir->is_dir;
    my $libdir = $distdir->subdir('lib');
    if (-e $libdir) {
        say "Adding $libdir to PERL5LIB",
        return $libdir;
    }
    return;
}
sub add_project_to_path {
    my $dir = dir(shift);
    return map { add_dist_to_path($_) } $dir->children;
}
sub add_dist_to_path {
    my $distdir = shift;
    return unless $distdir->is_dir;
    my $bindir = $distdir->subdir('bin');
    if (-e $bindir) {
        say "Adding $bindir to PATH",
        return $bindir;
    }
    return;
}
sub installdeps {
    my $distdir = shift;
    return unless $distdir->is_dir;

    for ($distdir->children) {
        next unless $_->is_dir;
        next unless -e $_->subdir('lib');
        say "Installing deps for $_";
        system( qw(/opt/perl5/bin/cpanm -M http://cpan.opusvl.com --installdeps -nvl), $ENV{HOME}, $_ );
    }
}

# PODNAME: entrypoint
# ABSTRACT: Docker entrypoint for FB11-based images
